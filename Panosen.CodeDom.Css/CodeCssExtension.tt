<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
<#

    var rootNamespace = this.Host.ResolveParameterValue("directiveId", "namespaceDirectiveProcessor", "namespaceHint");
    var file = new FileInfo(this.Host.TemplateFile);
    var fileName = file.Name.Replace(file.Extension, string.Empty);

    var path =  this.Host.ResolvePath("..\\css.ttinclude");
    var content = File.ReadAllText(path);

    Dictionary<string, string> map = new Dictionary<string, string>();
    var lines = content.Split(new string[] { "\r", "\n" }, StringSplitOptions.RemoveEmptyEntries);
    foreach (var line in lines)
    {
        var items = line.Split(new string[] { " ", "\t" }, StringSplitOptions.RemoveEmptyEntries);
        map.Add(items[0], items[1]);
    }


#>
using System;

namespace <#=rootNamespace#>
{
    /// <summary>
    /// css 样式
    /// </summary>
    public static class <#=fileName#>
    {

        /// <summary>
        /// set Name
        /// </summary>
        /// <param name="codeCss"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        public static TCodeCss SetName<TCodeCss>(this TCodeCss codeCss, string name) where TCodeCss : CodeCss
        {
            codeCss.Name = name;

            return codeCss;
        }

        /// <summary>
        /// set Comment
        /// </summary>
        /// <param name="codeCss"></param>
        /// <param name="comment"></param>
        /// <returns></returns>
        public static TCodeCss SetComment<TCodeCss>(this TCodeCss codeCss, string comment) where TCodeCss : CodeCss
        {
            codeCss.Comment = comment;

            return codeCss;
        }

<#
    foreach (var item in map)
    {
#>

        /// <summary>
        /// set <#=item.Key#>
        /// </summary>
        public static TCodeCss Set<#=item.Key#><TCodeCss>(this TCodeCss codeCss, string @<#=ToLowerCamelCase(item.Key)#>) where TCodeCss : CodeCss
        {
            codeCss.<#=item.Key#> = @<#=ToLowerCamelCase(item.Key)#>;

            return codeCss;
        }
<#
    }
#>
    }
}
<#+
        public static string ToLowerCamelCase(string name)
        {
            return name[0].ToString().ToLower() + name.Substring(1);
        }
#>
